package kr.or.bit;

import java.util.Arrays;

// Stack 자료구조를 설계하기
// 1. 저장공간이 필요하다 : Array >> Object[] sarray
//   MyStack my = new MyStack(); >> 기본적으로 배열이 생성되어야 한다.
//                               ㄴ> 크기 설정이 가능하도록 해라 (파라미터로 받아서)
//   MyStack my = new MyStack(10); >> Object 배열 10개가 만들어지도록
// 2. 위치정보를 알고있어야 한다 (커서가 몇번째 방을 가리키고 있는지) : Pointer, position, index 등 ....의 이름으로!
//      ㄴ> 저장되는 값이 있는 위치 정보
// 3. 기능: push(Object) // Object pop // isEmpty(배열이 비어있는지 확인) // Full (배열이 꽉찼는지)

public class MyStack {

    Object[] sarray; 
    int index = 0; // 위치정보
    int size = 0; // 길이 = 위치정보일 때 Full
    
    Object pop; // pop실행시 들어있는 값을 리턴시킨 뒤 배열을 비우려고 만든 것......
    
    MyStack(int size) {
        sarray = new Object[size];
        this.size = size;
    }
    
    void push(Object object){
        sarray[index] = object;
        index++;
    }
    
    Object pop(){ 
        index--;
        pop = sarray[index];
        sarray[index] = null;
        return pop;
    }
    
    boolean isEmpty() {
        if(index == 0) return true;
        else return false;
    }
    
    boolean isFull() {
        if(size == index) return true;
        else return false;
    }
    
    
    
    @Override
    public String toString() {
        return "MyStack [sarray=" + Arrays.toString(sarray) + "]";
    }

    public static void main(String[] args) {
        MyStack my = new MyStack(10);
        my.push("AAA");
        System.out.println(my.pop());
        
        my.push("AAA");
        my.push("BBB");
        my.push("CCC");
        System.out.println(my.pop());
        System.out.println(my.pop());
        System.out.println(my.pop());
        
        System.out.println("비어있나용? " + my.isEmpty());
        System.out.println("꽉찼나용? " + my.isFull());
        System.out.println("size: " + my.size);
        
        System.out.println(my.toString());
    }
    
}
