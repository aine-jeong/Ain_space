package kr.or.bit;
/*
 클래스는 설계도이다, 클래스는 타입이다.
 클래스 == 설계도 == 데이터 타입(큰 타입!)
 
 설계도 정의
 >> 만약 아파트 설계도라고 한다면, 설계도를 구성하는 요소가 필요하다.
    (class)설계도라고 이야기 하려면, 최소한 ... 이 구성되어 있어야 한다.
    ... :
    1. 속성 (변수)
    2. 기능, 행위 (함수)
    
    즉, 속성과 기능이 갖춰져 있으면 설계도라고 할 수 있다.
    
 클래스는 구체화를 통해서 사용한다. (집을 짓는 행위)
 프로그램에서는 memory에 올리는 것을 말한다. >> new 연산자 >> 이런 과정을 통해 만든 것을 "객체(인스턴스)"라고 한다.
 
 
 
 */
public class Apt {
    // 변수 + 함수
    public int door; // instance variable(member field)는 초기화를 하지 않아도 된다 
                      // -> 초기화 하지 않으면 default값을 가지고 있다.
                      //// 객체를 만드는 사용자마다 다른 값을 가질 수 있게 하기 위해서
    
    // 변수의 초기화: 변수가 처음 값을 갖는 행위 <-> (대비되는 용어) default(초기화하지 않으면 갖는 값)
  
    // 설계자의 의도: 왜 door를 초기화하지 않았을까?
    // 아파트마다 문의 개수가 다를 수 있다.
    // 집을 짓는 니가 알아서 설정해.
    
    public int window = 10; // 초기화도 가능하당!
    
    
    // 만약 내가 Car 라는 클래스를 새로 만들었다
    // public Car car; 라고 선언할 수 있는가?
    // O
    // 초기화하지 않아도 되는가? 
    // O -> 클래스 안에 선언되는 변수는(인스턴스 변수이기 때문에) default값을 갖기 때문에 초기화하지 않아도 된다. 
    //                                                ㄴ> 처음부터 null 값을 가진다.
    // 각 변수가 어느 영역 안에 선언되었는지 잘 파악하기.
    
    // 또한 Ex01_Ref_Type 에서
    
    // Car car;
    // car = null;
    // system.out.println(car); // 지역변수
    // 
    // Apt ap3 = new Apt();
    // system.out.println(ap3.car);
    
    // 이렇게 사용 가능!
}
